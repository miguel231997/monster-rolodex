{"version":3,"sources":["components/Card/Card.jsx","components/CardList/CardList.jsx","components/SearcBox/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","onSearchChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAaeA,MAVf,SAAcC,GACV,OACI,sBAAKC,UAAY,iBAAjB,UACI,qBAAMC,IAAM,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACzB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCMGC,MAVf,SAAkBR,GACd,OACI,qBAAKC,UAAY,YAAjB,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,UCJxBM,G,MAAY,SAAAX,GAAK,OAC5B,uBACEC,UAAU,aACVW,KAAK,SACLC,YAAY,kBACZC,SAAUd,EAAMe,mBCqCLC,E,kDAxCX,aAAc,IAAD,8BACX,gBAcFD,eAAiB,SAAAE,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAc,IALL,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO5C,WACE,MAAgCC,KAAKN,MAA9Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGpD,OACE,sBAAK9B,UAAY,MAAjB,UACE,iDAGA,cAAC,EAAD,CAAWc,eAAkBa,KAAKb,iBAClC,cAAC,EAAD,CAAUN,SAAaoB,W,GAhCXI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.04163b28.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nfunction Card(props) {\n    return (\n        <div className = 'card-container'>\n            < img alt = \"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h2> {props.monster.name} </h2>\n            <p> {props.monster.email} </p>\n        </div>\n    )\n}\n\nexport default Card\n","import React from 'react';\nimport './CardList.css'\nimport Card from '../Card/Card';\n\nfunction CardList(props) {\n    return (\n        <div className = 'card-list'>\n            {props.monsters.map(monster =>(\n                <Card key = {monster.id} monster = {monster} />\n            ))}\n        </div>\n    )\n}\n\nexport default CardList\n","import React from 'react';\n\nimport './SearchBox.css';\n\nexport const SearchBox = props => (\n  <input\n    className='search-box'\n    type='search'\n    placeholder='search monsters'\n    onChange={props.onSearchChange}\n  />\n);","import React, { Component } from 'react';\nimport './App.css';\nimport  CardList  from './components/CardList/CardList';\nimport { SearchBox } from './components/SearcBox/SearchBox';\n\nclass App extends Component{\n    constructor(){\n      super();\n\n      this.state = {\n        monsters: [],\n        searchField : ''\n      };\n    }\n\n    componentDidMount(){\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}))\n    }\n\n    onSearchChange = event => {\n      this.setState({searchField: event.target.value});\n    }\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n  return (\n    <div className = 'App'>\n      <h1>\n        Monster Rolodex\n      </h1>\n      <SearchBox onSearchChange = {this.onSearchChange} />\n      <CardList monsters =  {filteredMonsters } />\n    </div>\n  );\n\n  }\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}